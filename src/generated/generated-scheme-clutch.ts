/* eslint-disable max-len */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    get: operations['AppController_getHello'];
  };
  '/health': {
    get: operations['AppController_getHealth'];
  };
  '/v1/fee/{network}': {
    get: operations['GasTrackerController_getFees'];
  };
  '/v2/fee/{network}': {
    get: operations['GasTrackerV2Controller_getFees'];
  };
  '/v1.1/wallets/simple/price': {
    get: operations['WalletV11Controller_simplePrice'];
  };
  '/v1/wallets/transactions': {
    get: operations['WalletV10Controller_transactions'];
    post: operations['WalletV10Controller_registerTransaction'];
  };
  '/v2/wallets/simple/price': {
    /** Get price from coingecko. */
    get: operations['WalletV2Controller_simplePrice'];
  };
  '/v2/wallets/transaction/history/{id}': {
    get: operations['WalletV2Controller_getOneTransaction'];
  };
  '/v2/wallets/transaction/history': {
    /** Get transaction list of a given wallet address */
    get: operations['WalletV2Controller_transactions'];
  };
  '/v2/wallets/transaction': {
    /** Register wallet made transaction for tracking */
    post: operations['WalletV2Controller_registerTransaction'];
  };
  '/v1/transactions': {
    get: operations['TransactionController_getTransaction'];
  };
  '/v1/transactions/refresh': {
    get: operations['TransactionController_refreshTransaction'];
  };
  '/v1/transactions/refresh-bulk': {
    get: operations['TransactionController_refreshBulkTransaction'];
  };
  '/v2/transactions/refresh': {
    get: operations['TransactionV2Controller_refreshTransaction'];
  };
  '/v1/native-swap/{network}/approve/spender': {
    get: operations['NativeSwapController_approveSpender'];
  };
  '/v1/native-swap/{network}/tokens': {
    get: operations['NativeSwapController_tokens'];
  };
  '/v1/native-swap/{network}/quote': {
    /** 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE refers `BNB` on BNB Smart Chain <br />quote can be varied by amount(exactly, fromTokenAmount) <br /> */
    get: operations['NativeSwapController_quote'];
  };
  '/v1/native-swap/{network}/swap': {
    /** You need to fetch transaction and use `from`, `to`, `value`, `data`.. of `tx` thru this API. And then send transaction to Blockchain network with this data. */
    get: operations['NativeSwapController_swap'];
  };
  '/v1/native-swap/{network}/broadcast': {
    /** You can input rawTransaction data on body. You need to include `hash`. */
    post: operations['NativeSwapController_broadcast'];
  };
  '/v1.1/native-swap/{network}/tokens': {
    get: operations['NativeSwapV1_1Controller_tokens'];
  };
  '/v2/native-swap/{network}/approve/spender': {
    /** Address of router(dex) to approve */
    get: operations['NativeSwapV2Controller_approveSpender'];
  };
  '/v2/native-swap/{network}/tokens': {
    /** Map of tokens */
    get: operations['NativeSwapV2Controller_tokens'];
  };
  '/v2/native-swap/{network}/quote': {
    /**
     * Quote from -> to token pair swap<BR/><BR/>
     * 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE refers `BNB` on BNB Smart Chain <br />
     * quote can be varied by amount(exactly, fromTokenAmount) <br />
     */
    get: operations['NativeSwapV2Controller_quote'];
  };
  '/v2/native-swap/{network}/swap': {
    /**
     * Get Transaction for swap<BR/>
     * You need to fetch transaction and use `from`, `to`, `value`, `data`.. of `tx` thru this API. And then send transaction to Blockchain network with this data.',
     */
    get: operations['NativeSwapV2Controller_swap'];
  };
  '/v2/native-swap/{network}/broadcast': {
    /**
     * Broadcast transaction to server<BR/>
     * You can input rawTransaction data on body. You need to include `hash`.
     */
    post: operations['NativeSwapV2Controller_broadcast'];
  };
  '/v1.1/link-transfer/receive': {
    get: operations['LinkTransferController_getReceive'];
  };
  '/v2/link-transfer/log': {
    /** Logging for Qr Tranfer Event in Client */
    post: operations['LinkTransferV2Controller_log'];
  };
  '/v1/token/{network}': {
    /** Token Information List */
    get: operations['TokenController_getTokenList'];
  };
}

export interface components {
  schemas: {
    GasFeeOracle: {
      /** @description number string */
      low: string;
      /** @description number string */
      medium: string;
      /** @description number string */
      high: string;
    };
    TransactionsResponseDto: {
      /** @enum {string} */
      type: 'SEND_ETH' | 'SEND_ERC20' | 'SEND_ERC721' | 'SEND_BEP20' | 'SEND_BEP20_BTCB' | 'SEND_BNB' | 'SEND_XTZ';
      /** @enum {string} */
      status: 'PENDING' | 'SUCCESS' | 'FAIL';
      from: string;
      to?: string;
      hash: string;
      value: string;
      fee: string;
      updatedAt: string;
      ticker?: string;
      blockNumber: number;
      index: number;
      nonce: number;
    };
    RegisterTransactionDto: {
      /** @enum {string} */
      network: 'BITCOIN' | 'ETHEREUM' | 'BSC' | 'XTZ';
      /** @enum {string} */
      type: 'SEND_ETH' | 'SEND_ERC20' | 'SEND_ERC721' | 'SEND_BEP20' | 'SEND_BEP20_BTCB' | 'SEND_BNB' | 'SEND_XTZ';
      value: string;
      from: string;
      to: string;
      hash: string;
      /** @default null */
      data?: string;
      nonce: number;
    };
    TransferTransactionHistoryResponseDto: {
      /** @enum {string} */
      type: 'SEND_ETH' | 'SEND_ERC20' | 'SEND_ERC721' | 'SEND_BEP20' | 'SEND_BEP20_BTCB' | 'SEND_BNB' | 'SEND_XTZ';
      /** @enum {string} */
      status: 'PENDING' | 'SUCCESS' | 'FAIL';
      id: string;
      from: string;
      to?: string;
      hash: string;
      value: string;
      fee: string;
      updatedAt: string;
      ticker?: string;
      logIndex: number;
      blockNumber: number;
    };
    TransactionDetailDto: { [key: string]: unknown };
    RefreshTransactionResponseDto: {
      hash: string;
      network: string;
      status: string;
      from: string;
      to: string | null;
      value: string;
      type: string;
      fee: string;
      data: string;
      nonce: number;
      index: number;
    };
    SpenderResponseDto: {
      address: string;
    };
    TokensResponseDto: {
      tokens: { [key: string]: unknown };
    };
    TokenInfoDto: {
      symbol: string;
      name: string;
      address: string;
      decimals: number;
      logoURI: string;
    };
    FetchPriceResponseDto: {
      toTokenAmount: string;
      fromTokenAmount: string;
      fromToken?: components['schemas']['TokenInfoDto'];
      toToken?: components['schemas']['TokenInfoDto'];
      priceImpact?: string;
      protocols?: { [key: string]: unknown };
      estimatedGas?: number;
    };
    RawTransactionDto: {
      from: string;
      to: string;
      data: string;
      value: string;
      gasPrice?: string;
      gas?: string;
    };
    CreateNativeSwapTransactionResponseDto: {
      tx: components['schemas']['RawTransactionDto'];
      toTokenAmount: string;
      fromTokenAmount: string;
      fromToken?: components['schemas']['TokenInfoDto'];
      toToken?: components['schemas']['TokenInfoDto'];
      protocols?: string[];
    };
    BroadcastTransactionDto: {
      hash: string;
      value: string;
      from: string;
      to: string;
      data: string;
      nonce?: number;
    };
    SimpleResponseDto: {
      success: boolean;
    };
    LinkTransferLogDto: {
      /** @enum {string} */
      network: 'BITCOIN' | 'ETHEREUM' | 'BSC' | 'XTZ';
      value: number;
      tokenAddress?: string;
      address: string;
    };
    TokenDto: {
      /** @description Token Symbol */
      symbol: string;
      /** @description Token name */
      name: string;
      /** @description Token Decimal */
      decimals: number;
      /**
       * @description Token Contract Address<BR/>
       * If this model is a coin not a token, this value would be null.
       */
      contractAddress: string | null;
      /** @description Logo Image URI */
      logoURI: string;
      /** @description Token ID for requesting simple/price. */
      priceId: string;
    };
  };
}

export interface operations {
  AppController_getHello: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': string;
        };
      };
    };
  };
  AppController_getHealth: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': string;
        };
      };
    };
  };
  GasTrackerController_getFees: {
    parameters: {
      path: {
        network: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GasFeeOracle'];
        };
      };
    };
  };
  GasTrackerV2Controller_getFees: {
    parameters: {
      path: {
        network: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GasFeeOracle'];
        };
      };
      401: {
        content: {
          'application/json': {
            /** @default Session expired or deleted */
            message?: string;
            /** @default EXPIRED_SESSION */
            code?: string;
          };
        };
      };
      404: {
        content: {
          'application/json': {
            /** @default UserIdentifier not exists! */
            message?: string;
          };
        };
      };
    };
  };
  WalletV11Controller_simplePrice: {
    parameters: {
      query: {
        include_market_cap?: string;
        include_24hr_vol?: string;
        include_24hr_change?: string;
        include_last_updated_at?: string;
        ids: string;
        vs_currencies: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': { [key: string]: unknown };
        };
      };
      default: unknown;
    };
  };
  WalletV10Controller_transactions: {
    parameters: {
      query: {
        network: 'BITCOIN' | 'ETHEREUM' | 'BSC' | 'XTZ';
        address: string;
        beforeblock: number;
        beforeindex: number;
        ticker?: string;
        filter?: string;
        limit?: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TransactionsResponseDto'][];
        };
      };
      default: {
        content: {
          'application/json': components['schemas']['TransactionsResponseDto'][];
        };
      };
    };
  };
  WalletV10Controller_registerTransaction: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['TransactionsResponseDto'];
        };
      };
      default: {
        content: {
          'application/json': components['schemas']['TransactionsResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RegisterTransactionDto'];
      };
    };
  };
  /** Get price from coingecko. */
  WalletV2Controller_simplePrice: {
    parameters: {
      query: {
        include_market_cap?: string;
        include_24hr_vol?: string;
        include_24hr_change?: string;
        include_last_updated_at?: string;
        ids: string;
        vs_currencies: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': { [key: string]: unknown };
        };
      };
      401: {
        content: {
          'application/json': {
            /** @default Session expired or deleted */
            message?: string;
            /** @default EXPIRED_SESSION */
            code?: string;
          };
        };
      };
      404: {
        content: {
          'application/json': {
            /** @default UserIdentifier not exists! */
            message?: string;
          };
        };
      };
    };
  };
  WalletV2Controller_getOneTransaction: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TransferTransactionHistoryResponseDto'];
        };
      };
    };
  };
  /** Get transaction list of a given wallet address */
  WalletV2Controller_transactions: {
    parameters: {
      query: {
        network: 'BITCOIN' | 'ETHEREUM' | 'BSC' | 'XTZ';
        filter: 'ALL' | 'SEND' | 'RECEIVE';
        address: string;
        blockNumber?: number;
        logIndex?: number;
        ticker?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TransferTransactionHistoryResponseDto'][];
        };
      };
    };
  };
  /** Register wallet made transaction for tracking */
  WalletV2Controller_registerTransaction: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['TransferTransactionHistoryResponseDto'];
        };
      };
      400: {
        content: {
          'application/json': {
            /** @default already existing transaction network=network hash=hash */
            message?: string;
            /** @default EXISTING_TRANSACTION */
            code?: string;
          };
        };
      };
      401: {
        content: {
          'application/json': {
            /** @default Session expired or deleted */
            message?: string;
            /** @default EXPIRED_SESSION */
            code?: string;
          };
        };
      };
      404: {
        content: {
          'application/json': {
            /** @default UserIdentifier not exists! */
            message?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RegisterTransactionDto'];
      };
    };
  };
  TransactionController_getTransaction: {
    parameters: {
      query: {
        network: string;
        hash: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TransactionDetailDto'];
        };
      };
    };
  };
  TransactionController_refreshTransaction: {
    parameters: {
      query: {
        /** Only BITCOIN, ETHEREUM, BSC, XTZ */
        network: 'BITCOIN' | 'ETHEREUM' | 'BSC' | 'XTZ';
        hash: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['RefreshTransactionResponseDto'];
        };
      };
    };
  };
  TransactionController_refreshBulkTransaction: {
    parameters: {
      query: {
        /** Only BITCOIN, ETHEREUM, BSC, XTZ */
        network: 'BITCOIN' | 'ETHEREUM' | 'BSC' | 'XTZ';
        hash: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['RefreshTransactionResponseDto'];
        };
      };
    };
  };
  TransactionV2Controller_refreshTransaction: {
    parameters: {
      query: {
        /** Only BITCOIN, ETHEREUM, BSC, XTZ */
        network: 'BITCOIN' | 'ETHEREUM' | 'BSC' | 'XTZ';
        hash: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['RefreshTransactionResponseDto'];
        };
      };
    };
  };
  NativeSwapController_approveSpender: {
    parameters: {
      path: {
        network: string;
      };
    };
    responses: {
      /** success */
      200: {
        content: {
          'application/json': components['schemas']['SpenderResponseDto'];
        };
      };
    };
  };
  NativeSwapController_tokens: {
    parameters: {
      path: {
        network: string;
      };
    };
    responses: {
      /** success */
      200: {
        content: {
          'application/json': components['schemas']['TokensResponseDto'];
        };
      };
    };
  };
  /** 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE refers `BNB` on BNB Smart Chain <br />quote can be varied by amount(exactly, fromTokenAmount) <br /> */
  NativeSwapController_quote: {
    parameters: {
      path: {
        network: string;
      };
      query: {
        fromTokenAddress: string;
        toTokenAddress: string;
        amount: string;
        fee?: string;
        protocols?: string;
        gasPrice?: string;
        complexityLevel?: string;
        connectorTokens?: string;
        gasLimit?: string;
        mainRouteParts?: string;
        parts?: string;
      };
    };
    responses: {
      /** success */
      200: {
        content: {
          'application/json': components['schemas']['FetchPriceResponseDto'];
        };
      };
    };
  };
  /** You need to fetch transaction and use `from`, `to`, `value`, `data`.. of `tx` thru this API. And then send transaction to Blockchain network with this data. */
  NativeSwapController_swap: {
    parameters: {
      path: {
        network: string;
      };
      query: {
        fromTokenAddress: string;
        toTokenAddress: string;
        amount: string;
        fromAddress: string;
        slippage?: number;
        protocols?: string;
        destReceiver?: string;
        referrerAddress?: string;
        fee?: string;
        gasPrice?: string;
        disableEstimate?: boolean;
        permit?: string;
        burnChi?: boolean;
        allowPartialFill?: boolean;
        parts?: string;
        mainRouteParts?: string;
        connectorTokens?: string;
        complexityLevel?: string;
        gasLimit?: string;
      };
    };
    responses: {
      /** success */
      200: {
        content: {
          'application/json': components['schemas']['CreateNativeSwapTransactionResponseDto'];
        };
      };
    };
  };
  /** You can input rawTransaction data on body. You need to include `hash`. */
  NativeSwapController_broadcast: {
    parameters: {
      path: {
        network: string;
      };
    };
    responses: {
      /** success */
      200: {
        content: {
          'application/json': components['schemas']['SimpleResponseDto'];
        };
      };
      201: {
        content: {
          'application/json': components['schemas']['SimpleResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['BroadcastTransactionDto'];
      };
    };
  };
  NativeSwapV1_1Controller_tokens: {
    parameters: {
      path: {
        network: string;
      };
    };
    responses: {
      /** success */
      200: {
        content: {
          'application/json': components['schemas']['TokensResponseDto'];
        };
      };
    };
  };
  /** Address of router(dex) to approve */
  NativeSwapV2Controller_approveSpender: {
    parameters: {
      path: {
        network: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SpenderResponseDto'];
        };
      };
      400: {
        content: {
          'application/json': {
            /** @default Not Support network: network. Only BNB Smart Chain is supported for now. */
            message?: string;
            /** @default NOT_SUPPORT_NETWORK */
            code?: string;
          };
        };
      };
      401: {
        content: {
          'application/json': {
            /** @default Session expired or deleted */
            message?: string;
            /** @default EXPIRED_SESSION */
            code?: string;
          };
        };
      };
      404: {
        content: {
          'application/json': {
            /** @default UserIdentifier not exists! */
            message?: string;
          };
        };
      };
    };
  };
  /** Map of tokens */
  NativeSwapV2Controller_tokens: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TokensResponseDto'];
        };
      };
      400: {
        content: {
          'application/json': {
            /** @default Not Support network: network. Only BNB Smart Chain is supported for now. */
            message?: string;
            /** @default NOT_SUPPORT_NETWORK */
            code?: string;
          };
        };
      };
      401: {
        content: {
          'application/json': {
            /** @default Session expired or deleted */
            message?: string;
            /** @default EXPIRED_SESSION */
            code?: string;
          };
        };
      };
      404: {
        content: {
          'application/json': {
            /** @default UserIdentifier not exists! */
            message?: string;
          };
        };
      };
    };
  };
  /**
   * Quote from -> to token pair swap<BR/><BR/>
   * 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE refers `BNB` on BNB Smart Chain <br />
   * quote can be varied by amount(exactly, fromTokenAmount) <br />
   */
  NativeSwapV2Controller_quote: {
    parameters: {
      query: {
        fromTokenAddress: string;
        toTokenAddress: string;
        amount: string;
        fee?: string;
        protocols?: string;
        gasPrice?: string;
        complexityLevel?: string;
        connectorTokens?: string;
        gasLimit?: string;
        mainRouteParts?: string;
        parts?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['FetchPriceResponseDto'];
        };
      };
      400: {
        content: {
          'application/json': {
            /** @default Amount must greater than 0 */
            message?: string;
            /** @default INVALID_AMOUNT */
            code?: string;
          };
        };
      };
      401: {
        content: {
          'application/json': {
            /** @default Session expired or deleted */
            message?: string;
            /** @default EXPIRED_SESSION */
            code?: string;
          };
        };
      };
      404: {
        content: {
          'application/json': {
            /** @default UserIdentifier not exists! */
            message?: string;
          };
        };
      };
    };
  };
  /**
   * Get Transaction for swap<BR/>
   * You need to fetch transaction and use `from`, `to`, `value`, `data`.. of `tx` thru this API. And then send transaction to Blockchain network with this data.',
   */
  NativeSwapV2Controller_swap: {
    parameters: {
      query: {
        fromTokenAddress: string;
        toTokenAddress: string;
        amount: string;
        fromAddress: string;
        slippage?: number;
        protocols?: string;
        destReceiver?: string;
        referrerAddress?: string;
        fee?: string;
        gasPrice?: string;
        disableEstimate?: boolean;
        permit?: string;
        burnChi?: boolean;
        allowPartialFill?: boolean;
        parts?: string;
        mainRouteParts?: string;
        connectorTokens?: string;
        complexityLevel?: string;
        gasLimit?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CreateNativeSwapTransactionResponseDto'];
        };
      };
      401: {
        content: {
          'application/json': {
            /** @default Session expired or deleted */
            message?: string;
            /** @default EXPIRED_SESSION */
            code?: string;
          };
        };
      };
      404: {
        content: {
          'application/json': {
            /** @default UserIdentifier not exists! */
            message?: string;
          };
        };
      };
    };
  };
  /**
   * Broadcast transaction to server<BR/>
   * You can input rawTransaction data on body. You need to include `hash`.
   */
  NativeSwapV2Controller_broadcast: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['SimpleResponseDto'];
        };
      };
      401: {
        content: {
          'application/json': {
            /** @default Session expired or deleted */
            message?: string;
            /** @default EXPIRED_SESSION */
            code?: string;
          };
        };
      };
      404: {
        content: {
          'application/json': {
            /** @default UserIdentifier not exists! */
            message?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['BroadcastTransactionDto'];
      };
    };
  };
  LinkTransferController_getReceive: {
    parameters: {};
    responses: {
      200: unknown;
    };
  };
  /** Logging for Qr Tranfer Event in Client */
  LinkTransferV2Controller_log: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['SimpleResponseDto'];
        };
      };
      401: {
        content: {
          'application/json': {
            /** @default Session expired or deleted */
            message?: string;
            /** @default EXPIRED_SESSION */
            code?: string;
          };
        };
      };
      404: {
        content: {
          'application/json': {
            /** @default UserIdentifier not exists! */
            message?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LinkTransferLogDto'];
      };
    };
  };
  /** Token Information List */
  TokenController_getTokenList: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TokenDto'][];
        };
      };
      400: {
        content: {
          'application/json': {
            /** @default Not support Network: network */
            message?: string;
            /** @default NOT_SUPPORTED_NETWORK */
            code?: string;
          };
        };
      };
    };
  };
}

export interface external {}

export type GasFeeOracle = components['schemas']['GasFeeOracle'];
export type TransactionsResponseDto = components['schemas']['TransactionsResponseDto'];
export type RegisterTransactionDto = components['schemas']['RegisterTransactionDto'];
export type TransferTransactionHistoryResponseDto = components['schemas']['TransferTransactionHistoryResponseDto'];
export type TransactionDetailDto = components['schemas']['TransactionDetailDto'];
export type RefreshTransactionResponseDto = components['schemas']['RefreshTransactionResponseDto'];
export type SpenderResponseDto = components['schemas']['SpenderResponseDto'];
export type TokensResponseDto = components['schemas']['TokensResponseDto'];
export type TokenInfoDto = components['schemas']['TokenInfoDto'];
export type FetchPriceResponseDto = components['schemas']['FetchPriceResponseDto'];
export type RawTransactionDto = components['schemas']['RawTransactionDto'];
export type CreateNativeSwapTransactionResponseDto = components['schemas']['CreateNativeSwapTransactionResponseDto'];
export type BroadcastTransactionDto = components['schemas']['BroadcastTransactionDto'];
export type SimpleResponseDto = components['schemas']['SimpleResponseDto'];
export type LinkTransferLogDto = components['schemas']['LinkTransferLogDto'];
export type TokenDto = components['schemas']['TokenDto'];
