/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: operations["AppController_getHello"];
  };
  "/health": {
    get: operations["HealthController_getHealth"];
  };
  "/auth/deferred/validate": {
    post: operations["DeferredOauthController_authVerification"];
  };
  "/auth/deferred": {
    post: operations["DeferredOauthController_createDeferredAuth"];
  };
  "/users/current/wallet": {
    post: operations["WalletsController_connectWallet"];
  };
  "/users/current/wallet/sign": {
    post: operations["WalletsController_verifyWallet"];
  };
  "/auth/discord": {
    get: operations["DiscordOauthController_discordAuth"];
  };
  "/auth/discord/validate": {
    /** @deprecated use POST /auth/deferred/validate */
    post: operations["DiscordOauthController_discordAuthVerification"];
  };
  "/auth/twitter": {
    get: operations["TwitterOauthController_twitterAuth"];
  };
  "/auth/web3/request": {
    post: operations["Web3OauthController_requestSignMessage"];
  };
  "/auth/web3/validate": {
    post: operations["Web3OauthController_authVerification"];
  };
  "/users/current": {
    get: operations["UsersController_getCurrentUser"];
  };
  "/users/abstract/{userId}": {
    get: operations["UsersController_getAbstractUserInfo"];
  };
  "/users/invitees": {
    get: operations["UsersController_getMyInvitees"];
  };
  "/users/referrer": {
    post: operations["UsersController_registerReferrer"];
  };
  "/v1/accounts": {
    /** ClutchUser Registration */
    post: operations["ClutchUserController_signup"];
  };
  "/v1/accounts/check": {
    /** ClutchUser check */
    post: operations["ClutchUserController_check"];
  };
  "/v1/accounts/restore": {
    /** ClutchUser restore key or share */
    post: operations["ClutchUserController_restore"];
  };
  "/v1/accounts/ss": {
    /** set accessToken if provider = APPLE, set idtoken if provider = GOOGLE<br/> app-basic Secured */
    get: operations["ClutchUserController_getServerShare"];
    /** HMAC Secured */
    put: operations["ClutchUserController_updateServerShare"];
  };
  "/currencies/{id}": {
    get: operations["CurrenciesController_getCurrency"];
  };
  "/balance/accounts/current": {
    get: operations["BalanceAccountsController_getUserBalanceAccount"];
  };
  "/balance/withdrawals/active": {
    get: operations["BalanceWithdrawalRequestsController_getActiveWithdrawalRequests"];
  };
  "/balance/withdrawals/{id}": {
    get: operations["BalanceWithdrawalRequestsController_getWithdrawalRequest"];
    delete: operations["BalanceWithdrawalRequestsController_cancelWithdrawalRequest"];
  };
  "/balance/withdrawals": {
    post: operations["BalanceWithdrawalRequestsController_createWithdrawalRequest"];
  };
  "/payments": {
    post: operations["PaymentsController_createPayment"];
  };
  "/payments/active": {
    get: operations["PaymentsController_getActivePayment"];
  };
  "/payments/validate/{id}": {
    post: operations["PaymentsController_validatePayment"];
  };
  "/payments/{id}": {
    delete: operations["PaymentsController_cancelPayment"];
  };
  "/purchasables/group/{slug}": {
    get: operations["PurchasablesController_getGroupBySlug"];
  };
  "/games/user/result": {
    post: operations["GamesController_postRetry"];
  };
  "/games/result": {
    post: operations["GamesController_postResultPublic"];
  };
  "/games/gameResults/{id}/thumbnail": {
    post: operations["GamesController_requestCreateThumbnail"];
  };
  "/games/{id}": {
    get: operations["GamesController_getGame"];
  };
  "/games/{id}/payment": {
    post: operations["GamesController_payGame"];
  };
  "/games/gameResults/{id}": {
    get: operations["GamesController_getGameResult"];
  };
  "/games/gameResults/{id}/abstract": {
    get: operations["GamesController_getGameResultAbstract"];
  };
  "/tada-arcade/drivers": {
    get: operations["TadaArcadeController_getDrivers"];
  };
  "/games/democopter/active": {
    get: operations["DemocopterController_getActiveDemocopterGame"];
  };
  "/games/democopter/{id}": {
    get: operations["DemocopterController_getDemocopterGame"];
  };
  "/games/democopter/{id}/start": {
    post: operations["DemocopterController_startDemocopterGame"];
  };
  "/games/democopter/{id}/leaderboard": {
    get: operations["DemocopterController_getDemocopterLeaderboard"];
  };
  "/admin/games/democopter/{gameId}/schedule": {
    post: operations["DemocopterAdminController_createSchedule"];
  };
  "/admin/discord-bot/commands": {
    post: operations["DiscordBotController_register"];
  };
  "/purchasables/1stSale": {
    get: operations["NftSalesController_get"];
  };
  "/waitinglist/signature": {
    post: operations["NftSalesController_createSignature"];
  };
  "/users/current/wallet/bidSignature": {
    post: operations["NftSalesController_createBidSignature"];
  };
  "/missions/{group}": {
    get: operations["MissionsController_getMissions"];
  };
  "/missions/{id}/claim": {
    post: operations["MissionsController_claimMission"];
  };
  "/forms/{id}": {
    get: operations["FormsController_getForm"];
    post: operations["FormsController_submitForm"];
  };
  "/forms/{id}/inventory": {
    post: operations["FormsController_inventory"];
  };
  "/v1/mobiles": {
    post: operations["MobileController_register"];
  };
  "/v1/mobiles/current": {
    post: operations["MobileController_checkCurrent"];
  };
  "/v1.1/wallets/balance": {
    get: operations["VerifiedWalletV11Controller_balance"];
  };
  "/v1.1/wallets/simple/price": {
    get: operations["VerifiedWalletV11Controller_simplePrice"];
  };
  "/v1/wallets": {
    get: operations["VerifiedWalletV10Controller_list"];
    /** Register client-side created wallet */
    post: operations["VerifiedWalletV10Controller_registerWallet"];
  };
  "/v1/wallets/balance": {
    get: operations["VerifiedWalletV10Controller_balance"];
  };
  "/v1/third-party/{appId}/user/balance/earn": {
    /** Earn Servered balance third party user */
    post: operations["ThirdPartyController_balanceEarn"];
  };
  "/v1/third-party/{appId}/user/balance": {
    /** Get Serverd Balance amount */
    get: operations["ThirdPartyController_balance"];
  };
  "/v1/third-party/{appId}/balance/current": {
    get: operations["ThirdPartyController_balanceCurrent"];
  };
  "/v1/third-party/{appId}/noti-response-sample": {
    post: operations["ThirdPartyController_notiApiSample"];
  };
  "/v1/third-party/{appId}/earn-event/{eventAlias}/participation": {
    get: operations["ThirdPartyController_thirdPartyGetEventParticipationList"];
    post: operations["ThirdPartyController_thirdPartyEventParticipation"];
  };
  "/v1/third-party/{appId}/connect/check": {
    post: operations["ThirdPartyForClutchController_connectCheck"];
  };
  "/v1/third-party/{appId}/connect": {
    /** Connecting to third party user (for now just TADA) */
    post: operations["ThirdPartyForClutchController_connect"];
  };
  "/v1/third-party/{appId}/disconnect": {
    /** Disconnecting to third party user (for now just TADA) */
    post: operations["ThirdPartyForClutchController_disconnect"];
  };
  "/v1/earn-event/list": {
    /** Event Lists. */
    post: operations["EarnEventController_earnEventGet"];
  };
  "/v1/earn-event/{id}/participation/current": {
    /** User's Current point from this event. */
    post: operations["EarnEventController_earnEventPariticipationCurrent"];
  };
  "/v1/earn-event/{id}/claim/request": {
    /** Request Claim this event. */
    post: operations["EarnEventController_earhEventClaimRequest"];
  };
  "/v1/earn-event/{id}/claim/check": {
    /** Check Claim processing status. */
    post: operations["EarnEventController_earhEventClaimCheck"];
  };
  "/v1/earn-event/{id}/claim/information": {
    /** Claim informations to show claim modal. */
    post: operations["EarnEventController_earnEventGetClaim"];
  };
  "/v1/balance-clutch/current": {
    post: operations["BalanceClutchController_currentGet"];
  };
  "/v1/balance-clutch/withdraw/request": {
    post: operations["BalanceClutchController_withdrawRequest"];
  };
  "/v1/balance-clutch/withdraw/{id}": {
    get: operations["BalanceClutchController_getWithdrawRequest"];
  };
  "/v1/balance-clutch/deposit/request": {
    post: operations["BalanceClutchController_depositRequest"];
  };
}

export interface components {
  schemas: {
    /** @enum {string} */
    UserIdentifierType:
      | "PASSWORD"
      | "FACEBOOK"
      | "GOOGLE"
      | "TWITTER"
      | "DISCORD"
      | "APPLE"
      | "WEB3"
      | "HMAC"
      | "IN_MIGRATION";
    DeferredAuthValidateDto: {
      type: components["schemas"]["UserIdentifierType"];
      code: string;
    };
    WalletEntity: {
      id: string;
      verified: boolean;
      address: string;
      userId: string;
      user?: components["schemas"]["UserEntity"];
      authNonce: string | null;
      /** Format: date-time */
      lastSignatureMade: string | null;
      data: { [key: string]: unknown } | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    ThirdPartyUserEntity: {
      id: string;
      userId: string;
      user?: components["schemas"]["UserEntity"];
      appId: string;
      displayName: string | null;
      identifier: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    /** @enum {string} */
    EarnEventClaimType: "CONSTANT" | "RATIO_DIVISION";
    /** @enum {string} */
    BlockchainNetwork:
      | "ETHEREUM"
      | "ETHEREUM_ROPSTEN"
      | "ETHEREUM_KOVAN"
      | "ETHEREUM_RINKEBY"
      | "ETHEREUM_GOERLI"
      | "ETHEREUM_LOCAL"
      | "BSC"
      | "BSC_TEST"
      | "POLYGON"
      | "POLYGON_TEST"
      | "SOLANA"
      | "BITCOIN"
      | "XTZ"
      | "IN_MIGRATION";
    CurrencyEntity: {
      network: components["schemas"]["BlockchainNetwork"] | null;
      id: string;
      name: string;
      alias: string | null;
      data: { [key: string]: unknown };
      icon: string | null;
      contractAddress: string | null;
      withdrawalFee: number | null;
      balanceTransferable: boolean;
      balanceWithdrawable: boolean;
      tokenDecimal: number;
      withdrawalDelegateUserId: string | null;
      EarnEvent?: components["schemas"]["EarnEventEntity"][];
    };
    EarnEventParticipationLogEntity: {
      id: string;
      value: number;
      earnEventId: string;
      earnEvent?: components["schemas"]["EarnEventEntity"];
      userId: string;
      user?: components["schemas"]["UserEntity"];
      description: string | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    EarnEventEntity: {
      claimType: components["schemas"]["EarnEventClaimType"];
      id: string;
      alias: string;
      /** Format: date-time */
      eventStartAt: string;
      /** Format: date-time */
      eventEndAt: string;
      /** Format: date-time */
      claimStartAt: string;
      /** Format: date-time */
      claimEndAt: string;
      iconUrl: string;
      title: { [key: string]: unknown };
      subTitle: { [key: string]: unknown };
      detailPageUrl: { [key: string]: unknown };
      calcInfoPageUrl: { [key: string]: unknown };
      pointCurrency: string;
      pointIconUrl: string;
      eventActionTitle: { [key: string]: unknown };
      eventActionButtonTitle: { [key: string]: unknown };
      eventActionScheme: string;
      currencyId: string;
      maxReward: number;
      rewardPerValue: number | null;
      currency?: components["schemas"]["CurrencyEntity"];
      appId: string | null;
      app?: components["schemas"]["UserEntity"] | null;
      description: string | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      earnEventParticipationLog?: components["schemas"]["EarnEventParticipationLogEntity"][];
    };
    UserEntity: {
      id: string;
      email: string | null;
      name: string;
      avatar: string | null;
      pending: boolean;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      data: { [key: string]: unknown } | null;
      identifiers?: components["schemas"]["UserIdentifierEntity"][];
      wallet?: components["schemas"]["WalletEntity"] | null;
      thirdPartyUser?: components["schemas"]["ThirdPartyUserEntity"][];
      earnEvent?: components["schemas"]["EarnEventEntity"][];
      earnEventParticipationLog?: components["schemas"]["EarnEventParticipationLogEntity"][];
    };
    UserIdentifierEntity: {
      type: components["schemas"]["UserIdentifierType"];
      id: string;
      userId: string | null;
      avatar: string | null;
      name: string | null;
      identifier: string;
      data: { [key: string]: unknown };
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      user?: components["schemas"]["UserEntity"] | null;
    };
    UserWithWalletDto: {
      id: string;
      email: string | null;
      name: string;
      avatar: string | null;
      pending: boolean;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      data: { [key: string]: unknown } | null;
      identifiers?: components["schemas"]["UserIdentifierEntity"][];
      wallet: components["schemas"]["WalletEntity"] | null;
      thirdPartyUser?: components["schemas"]["ThirdPartyUserEntity"][];
      earnEvent?: components["schemas"]["EarnEventEntity"][];
      earnEventParticipationLog?: components["schemas"]["EarnEventParticipationLogEntity"][];
    };
    SignedUserIdentifierWithAccessTokenDto: {
      type: components["schemas"]["UserIdentifierType"];
      id: string;
      userId: string;
      avatar: string | null;
      name: string | null;
      identifier: string;
      data: { [key: string]: unknown };
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      user: components["schemas"]["UserWithWalletDto"];
      accessToken: string;
    };
    WalletAddressDto: {
      address: string;
    };
    WalletAndNonceDto: {
      wallet: components["schemas"]["WalletEntity"];
      nonce: string;
      msg: string;
    };
    VerifyWalletAddressDto: {
      signature: string;
    };
    DeprecatedDeferredAuthValidateDto: {
      code: string;
    };
    Web3AuthRequestDto: {
      walletAddress: string;
    };
    Web3AuthRequestResponseDto: {
      msg: string;
      nonce: string;
    };
    Web3AuthDto: {
      walletAddress: string;
      signature: string;
    };
    SignedUserIdentifierDto: {
      type: components["schemas"]["UserIdentifierType"];
      id: string;
      userId: string;
      avatar: string | null;
      name: string | null;
      identifier: string;
      data: { [key: string]: unknown };
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      user: components["schemas"]["UserWithWalletDto"];
    };
    AbstractUserDto: {
      id: string;
      name: string;
      avatar: string | null;
    };
    Invitee: {
      id: string;
      name: string;
      earned: boolean | null;
      /** Format: date-time */
      invitedAt: string;
    };
    GetInviteesDto: {
      count: number;
      data: components["schemas"]["Invitee"][];
    };
    RegisterReferrerDto: {
      userId: string;
      via: string;
    };
    /** @enum {string} */
    ForClutchUserIdentifierType: "GOOGLE" | "APPLE";
    SignupDto: {
      /** @description Only GOOGLE, APPLE */
      type: components["schemas"]["ForClutchUserIdentifierType"];
      /** @description required if type = GOOGLE */
      idtoken?: string;
      /** @description required if type = APPLE */
      accessToken?: string;
      /** @description required if type = APPLE */
      identifier?: string;
      /**
       * @description tkey server share
       * @example {"share":{"share":"xxxx","shareIndex":"xxx"},"polynomialID":"xxx|xxx"}
       */
      share: string;
      /** @description root public key in form of xpub */
      pubKey: string;
    };
    ClutchUserResponseDto: {
      /**
       * Format: uuid
       * @example 48855e7a-1ef3-4c1d-ae88-5361a2c8f7e6
       */
      id: string;
    };
    SignupCheckDto: {
      /** @description Only GOOGLE, APPLE */
      type: components["schemas"]["ForClutchUserIdentifierType"];
      /** @description required if type = GOOGLE */
      idtoken?: string;
      /** @description required if type = APPLE */
      accessToken?: string;
      /** @description required if type = APPLE */
      identifier?: string;
    };
    SignupCheckResponseDto: {
      exists: boolean;
    };
    RestoreAccountDto: {
      /** @description Only GOOGLE, APPLE */
      type: components["schemas"]["ForClutchUserIdentifierType"];
      /** @description required if type = GOOGLE */
      idtoken?: string;
      /** @description required if type = APPLE */
      accessToken?: string;
      /** @description required if type = APPLE */
      identifier?: string;
      /**
       * @description tkey server share
       * @example {"share":{"share":"xxxx","shareIndex":"xxx"},"polynomialID":"xxx|xxx"}
       */
      share: string;
      /** @description root public key in form of xpub */
      pubKey: string;
    };
    SimpleResponseDto: {
      /** @default ok */
      status: string;
    };
    UpdateServerShareDto: {
      /**
       * @description tkey server share
       * @example {"share":{"share":"xxxx","shareIndex":"xxx"},"polynomialID":"xxx|xxx", "deviceShareIndex": ""}
       */
      share: string;
    };
    ShareResponseDto: {
      /** @example {"share":{"share":"xxxx","shareIndex":"xxx"},"polynomialID":"xxx|xxx", "deviceShareIndex": ""} */
      jsonString: string;
      polynomialId: string;
      deviceShareIndex?: string;
    };
    HmacErrorDTO: {
      /** @default Invalid Hmac sig! */
      message: string;
    };
    BalanceAccountEntity: {
      id: string;
      title: string;
      amount: number;
      currencyId: string;
      currency?: components["schemas"]["CurrencyEntity"];
      userId: string;
      user?: components["schemas"]["UserEntity"];
      dailyMaxTransferAmount: number | null;
      blockchainAddress: string | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      lastTransactionId: string | null;
    };
    /** @enum {string} */
    BalanceRequestStatus:
      | "INCOMING"
      | "CONFIRMING"
      | "COMPLETED"
      | "CANCELED"
      | "FAILED"
      | "IN_MIGRATION";
    /** @enum {string} */
    PaymentStatus:
      | "CONFIRMING_BALANCE_DEPOSIT_REQUEST"
      | "CONFIRMING_BALANCE_TRANSACTION"
      | "CONFIRMING_MUTATE_EXTERNAL_STATE"
      | "FAILED_BALANCE_DEPOSIT_REQUEST"
      | "FAILED_BALANCE_TRANSACTION"
      | "FAILED_MUTATE_EXTERNAL_STATE"
      | "COMPLETED"
      | "REFUNDED"
      | "CANCELED";
    /** @enum {string} */
    PurchasableType: "MINT_ITEM" | "MINT_BALANCE" | "NFT_UPGRADE";
    /** @enum {string} */
    PurchasablePayMethod:
      | "BY_BALANCE_DEPOSIT_REQUEST"
      | "BY_BALANCE_TRANSACTION"
      | "BY_HYBRID_BALANCE_TRANSACTION"
      | "IN_MIGRATION";
    PurchasableEntity: {
      type: components["schemas"]["PurchasableType"];
      payMethod: components["schemas"]["PurchasablePayMethod"];
      id: string;
      title: string;
      order: number | null;
      quantityIsInteger: boolean;
      minimumBuyQuantity: number;
      maximumBuyQuantity: number | null;
      price: number;
      currencyId: string;
      currency?: components["schemas"]["CurrencyEntity"];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: date-time */
      salesStartAt: string | null;
      /** Format: date-time */
      salesEndAt: string | null;
      data: { [key: string]: unknown };
      groupId: string | null;
      sellerBalanceAccountId: string | null;
      sellerBalanceAccount?:
        | components["schemas"]["BalanceAccountEntity"]
        | null;
      paymentCount: number;
      maxPaymentCount: number | null;
      supportedUserIdentifierTypes: { [key: string]: unknown } | null;
      itemCount: number;
      maxItemCount: number | null;
      uniquePerUser: boolean;
      nftInfo: { [key: string]: unknown } | null;
    };
    PurchasableGroupEntity: {
      id: string;
      slug: string;
      unitIcon: string | null;
      unit: string | null;
      unitStep: number;
      paymentCount: number;
      maxPaymentCount: number | null;
    };
    ItemEntity: {
      id: string;
      purchasableId: string;
      purchasable?: components["schemas"]["PurchasableEntity"];
      purchasableGroupId: string | null;
      purchasableGroup?: components["schemas"]["PurchasableGroupEntity"] | null;
      data: { [key: string]: unknown };
      itemNo: number;
      userId: string;
      user?: components["schemas"]["UserEntity"];
      uniqueUserId: string | null;
      uniqueUser?: components["schemas"]["UserEntity"] | null;
      balanceTransactionId: string | null;
      balanceTransaction?:
        | components["schemas"]["BalanceTransactionEntity"]
        | null;
      paymentId: string | null;
      payment?: components["schemas"]["PaymentEntity"] | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    PaymentEntity: {
      status: components["schemas"]["PaymentStatus"];
      id: string;
      description: string;
      quantity: number;
      price: number;
      currencyId: string | null;
      currency?: components["schemas"]["CurrencyEntity"] | null;
      purchasableId: string;
      purchasable?: components["schemas"]["PurchasableEntity"];
      purchasableGroupId: string | null;
      purchasableGroup?: components["schemas"]["PurchasableGroupEntity"] | null;
      paymentNo: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      completedAt: string | null;
      /** Format: date-time */
      refundedAt: string | null;
      /** Format: date-time */
      canceledAt: string | null;
      /** Format: date-time */
      updatedAt: string;
      userId: string;
      user?: components["schemas"]["UserEntity"];
      items?: components["schemas"]["ItemEntity"][];
      data: { [key: string]: unknown } | null;
      balanceTransactions?: components["schemas"]["BalanceTransactionEntity"][];
      balanceDepositRequests?: components["schemas"]["BalanceDepositRequestEntity"][];
    };
    TokenTransactionLogEntity: {
      network: components["schemas"]["BlockchainNetwork"];
      id: string;
      amount: number;
      currencyId: string | null;
      currency?: components["schemas"]["CurrencyEntity"] | null;
      contractAddress: string;
      transactionHash: string;
      from: string;
      to: string;
      blockNumber: number;
      data: { [key: string]: unknown };
      blockExplorerUrl: string | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      capturedAt: string;
      balanceAccountId: string;
      balanceAccount?: components["schemas"]["BalanceAccountEntity"];
      depositRequestId: string | null;
      depositRequest?:
        | components["schemas"]["BalanceDepositRequestEntity"]
        | null;
      withdrawalRequestId: string | null;
      withdrawalRequest?:
        | components["schemas"]["BalanceWithdrawalRequestEntity"]
        | null;
    };
    BalanceDepositRequestEntity: {
      status: components["schemas"]["BalanceRequestStatus"];
      id: string;
      goalAmount: number;
      processedAmount: number | null;
      address: string;
      currencyId: string;
      currency?: components["schemas"]["CurrencyEntity"];
      description: string | null;
      balanceAccountId: string;
      balanceAccount?: components["schemas"]["BalanceAccountEntity"];
      paymentId: string | null;
      payment?: components["schemas"]["PaymentEntity"] | null;
      userId: string;
      user?: components["schemas"]["UserEntity"];
      data: { [key: string]: unknown } | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      balanceTransactions?: components["schemas"]["BalanceTransactionEntity"][];
      tokenTransactionLogs?: components["schemas"]["TokenTransactionLogEntity"][];
    };
    GameResultEntity: {
      id: string;
      winner: boolean | null;
      gameId: string;
      game?: components["schemas"]["GameEntity"];
      score: number;
      data: { [key: string]: unknown };
      username: string | null;
      userId: string | null;
      user?: components["schemas"]["UserEntity"] | null;
      userIdentifierId: string | null;
      userIdentifier?: components["schemas"]["UserIdentifierEntity"] | null;
      thumbnail: string | null;
      tried: number;
      /** Format: date-time */
      createdAt: string;
    };
    GameEntity: {
      id: string;
      type: string;
      totalEntries: number;
      totalUserEntries: number;
      entryFeeAmount: number | null;
      entryFeeCurrencyId: string | null;
      currency?: components["schemas"]["CurrencyEntity"] | null;
      entryFeeUserId: string | null;
      entryFeeUser?: components["schemas"]["UserEntity"] | null;
      title: string | null;
      description: string | null;
      data: { [key: string]: unknown };
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      closedAt: string | null;
      /** Format: date-time */
      nextGameStartsAt: string | null;
      gameDurationMs: string | null;
      gamePauseMs: string | null;
      raffleCriteria: string | null;
      loginRequired: boolean;
      gameResults?: components["schemas"]["GameResultEntity"][];
      balanceTransactions?: components["schemas"]["BalanceTransactionEntity"][];
    };
    /** @enum {string} */
    MissionType: "MY_ACTIVITIES_COUNT" | "REFEREE_ACTIVITIES_COUNT";
    /** @enum {string} */
    MissionRewardType: "BALANCE" | "ITEM";
    UserActivityEntity: {
      id: string;
      userId: string;
      user?: components["schemas"]["UserEntity"];
      inviterId: string | null;
      inviter?: components["schemas"]["UserEntity"] | null;
      type: string;
      data: { [key: string]: unknown } | null;
      /** Format: date-time */
      createdAt: string;
      missionAccomplishments?: components["schemas"]["MissionAccomplishedActivityEntity"][];
    };
    MissionAccomplishedActivityEntity: {
      type: components["schemas"]["MissionType"];
      id: string;
      missionId: string;
      mission?: components["schemas"]["MissionEntity"];
      accomplishmentId: string;
      accomplishment?: components["schemas"]["MissionAccomplishmentEntity"];
      activityId: string;
      activity?: components["schemas"]["UserActivityEntity"];
    };
    MissionEntity: {
      type: components["schemas"]["MissionType"];
      rewardType: components["schemas"]["MissionRewardType"];
      id: string;
      group: string;
      /** Format: date-time */
      startsAt: string;
      /** Format: date-time */
      endsAt: string | null;
      name: string;
      relatedActivityTypes: string[];
      accomplishCondition: string;
      accomplishStatus: string;
      accomplishCount: number;
      claimCount: number;
      maxAccomplishCountPerUser: number | null;
      maxAccomplishCount: number | null;
      maxClaimCountPerUser: number | null;
      maxClaimCount: number | null;
      rewarderUserId: string;
      rewarder?: components["schemas"]["UserEntity"];
      rewardPurchasableId: string | null;
      rewardPurchasable?: components["schemas"]["PurchasableEntity"] | null;
      rewardAmount: number;
      rewardCurrencyId: string | null;
      rewardCurrency?: components["schemas"]["CurrencyEntity"] | null;
      /** Format: date-time */
      createdAt: string;
      data: { [key: string]: unknown };
      translation: { [key: string]: unknown };
      accomplishments?: components["schemas"]["MissionAccomplishmentEntity"][];
      accomplishedActivities?: components["schemas"]["MissionAccomplishedActivityEntity"][];
    };
    MissionAccomplishmentEntity: {
      id: string;
      missionId: string;
      mission?: components["schemas"]["MissionEntity"];
      accomplishNo: number;
      claimNo: number | null;
      userId: string;
      user?: components["schemas"]["UserEntity"];
      /** Format: date-time */
      createdAt: string;
      activities?: components["schemas"]["MissionAccomplishedActivityEntity"][];
      balanceTransactions?: components["schemas"]["BalanceTransactionEntity"][];
    };
    BalanceTransactionEntity: {
      id: string;
      amount: number;
      currencyId: string;
      currency?: components["schemas"]["CurrencyEntity"];
      description: string | null;
      feeAmount: number;
      code: string | null;
      executerId: string | null;
      executer?: components["schemas"]["UserEntity"] | null;
      senderAccountId: string | null;
      senderAccount?: components["schemas"]["BalanceAccountEntity"] | null;
      receiverAccountId: string;
      receiverAccount?: components["schemas"]["BalanceAccountEntity"];
      depositRequestId: string | null;
      depositRequest?:
        | components["schemas"]["BalanceDepositRequestEntity"]
        | null;
      withdrawalRequestId: string | null;
      withdrawalRequest?:
        | components["schemas"]["BalanceWithdrawalRequestEntity"]
        | null;
      gameId: string | null;
      game?: components["schemas"]["GameEntity"] | null;
      paymentId: string | null;
      payment?: components["schemas"]["PaymentEntity"] | null;
      missionAccomplishmentId: string | null;
      missionAccomplishment?:
        | components["schemas"]["MissionAccomplishmentEntity"]
        | null;
      items?: components["schemas"]["ItemEntity"][];
      /** Format: date-time */
      createdAt: string;
    };
    BalanceWithdrawalRequestEntity: {
      status: components["schemas"]["BalanceRequestStatus"];
      id: string;
      amount: number;
      address: string;
      currencyId: string;
      currency?: components["schemas"]["CurrencyEntity"];
      feeAmount: number;
      description: string | null;
      balanceAccountId: string;
      balanceAccount?: components["schemas"]["BalanceAccountEntity"];
      userId: string;
      user?: components["schemas"]["UserEntity"];
      data: { [key: string]: unknown } | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      balanceTransactions?: components["schemas"]["BalanceTransactionEntity"][];
      tokenTransactionLogs?: components["schemas"]["TokenTransactionLogEntity"][];
    };
    BalanceWithdrawalRequestStatusDto: {
      /** @description Can the user cancel this request? */
      cancellable: boolean;
      /** @description Is this request finalized so that the user cannot action with? */
      finalized: boolean;
      /** @description Describe current status of request like: "Confirming your withdrawal request..." */
      title: string;
      /** @description Simple description for this request status in html (for list component) */
      abstractHtml: string;
      /** @description Describe current request status in html (for modal component) */
      descriptionHtml: string;
      request: components["schemas"]["BalanceWithdrawalRequestEntity"];
    };
    CreateBalanceWithdrawalRequestDto: {
      amount: number;
      currencyId: string;
      toAddress: string;
    };
    PaymentOptions: {
      /**
       * @description NFT Token Id.
       * Required if purchasable.type = `NFT_UPGRADE`
       */
      tokenId?: string;
      /**
       * @description NFT Contract Address.
       * Required if purchasable.type = `NFT_UPGRADE`
       */
      tokenContractAddress?: string;
      /**
       * @description Wallet address which will deposit.
       * Required if purchasable.payMethod = `BALANCE_DEPOSIT_REQUEST`
       */
      balanceDepositRequestAddress?: string;
      /**
       * @description Wallet address which target NFT owned.
       * Required if purchasable.type = `NFT_UPGRADE`
       */
      walletAddress?: string;
      /**
       * @description Signature signed with `/auth/web3/request` response message to validate the target NFT owner.
       * Required if purchasable.type = `NFT_UPGRADE`
       */
      signature?: string;
    };
    CreatePaymentDto: {
      /** @description Payment target purchasable */
      purchasableId: string;
      /** @description How many units will you buy */
      quantity: number;
      options?: components["schemas"]["PaymentOptions"];
    };
    PaymentStatusDto: {
      /** @description Can the user cancel this payment? */
      cancellable: boolean;
      /** @description Is this payment finalized so that the user cannot action with? */
      finalized: boolean;
      /** @description Describe current status of payment like: "Tracking your withdrawal transactions..." */
      title: string;
      /** @description Simple description for this payment using such as list components */
      abstractHtml: string;
      /** @description Describe current payment status in html (for Payment modal) */
      descriptionHtml: string;
      payment: components["schemas"]["PaymentEntity"];
    };
    PurchasableNftInfo: {
      contractAddress: string;
      network: { [key: string]: unknown };
    };
    TPurchasableEntity: {
      type: components["schemas"]["PurchasableType"];
      payMethod: components["schemas"]["PurchasablePayMethod"];
      supportedUserIdentifierTypes:
        | components["schemas"]["UserIdentifierType"][]
        | null;
      id: string;
      title: string;
      order: number | null;
      quantityIsInteger: boolean;
      minimumBuyQuantity: number;
      maximumBuyQuantity: number | null;
      price: number;
      currencyId: string;
      currency?: components["schemas"]["CurrencyEntity"];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: date-time */
      salesStartAt: string | null;
      /** Format: date-time */
      salesEndAt: string | null;
      data: { [key: string]: unknown };
      groupId: string | null;
      sellerBalanceAccountId: string | null;
      sellerBalanceAccount?:
        | components["schemas"]["BalanceAccountEntity"]
        | null;
      paymentCount: number;
      maxPaymentCount: number | null;
      itemCount: number;
      maxItemCount: number | null;
      uniquePerUser: boolean;
      nftInfo: components["schemas"]["PurchasableNftInfo"][] | null;
    };
    PurchasableGroupPageSettingsDto: {
      showPurchasableSummary: boolean;
      purchasableImageUrl: string | null;
      purchasableName: string;
      /** @description UI Top bar title */
      title: string;
      /** @description value for `<title>` tag */
      titleTag: string;
      /** @description "How much will you charge?" */
      buyAmountMessage: string;
      /** @description "Current balance" */
      currentBalanceMessage: string;
      /** @description "New balance after charging" */
      newBalanceMessage: string;
      /** @description "DEMO Studio official wallet address" */
      targetWalletAddressTitle: string;
    };
    PurchasableGroupDto: {
      id: string;
      slug: string;
      unitIcon: string | null;
      unit: string | null;
      unitStep: number;
      paymentCount: number;
      maxPaymentCount: number | null;
      purchasables: components["schemas"]["TPurchasableEntity"][];
      pageSettings: components["schemas"]["PurchasableGroupPageSettingsDto"];
      currentBalance: number;
    };
    GameResultDto: {
      gameId: string;
      data: string;
      username?: string;
    };
    GameResultAbstractDto: {
      id: string;
      score: number;
      username: string;
      position: number;
    };
    GameResultResponseDto: {
      id: string | null;
      userId: string | null;
      ranking: number;
      results: components["schemas"]["GameResultAbstractDto"][];
      items: components["schemas"]["ItemEntity"][];
    };
    TadaArcadeDriverInfo: {
      id: string;
      name: string;
      callcatch: number;
      health: number;
      speed: number;
      servicequality: number;
      distance: number;
      diligence: number;
      image_url: string;
    };
    AbstractUserIdentifierDto: {
      type: components["schemas"]["UserIdentifierType"];
      identifier: string;
      name: string | null;
      avatar: string | null;
    };
    LotteryGameResultDto: {
      id: string;
      winner: boolean;
      position: number;
      mine: boolean;
      score: number;
      /** @description use userIdentifier.name first */
      username: string | null;
      userIdentifier: components["schemas"]["AbstractUserIdentifierDto"] | null;
      userId: string | null;
      tried: number;
      possibility: number;
      ticket: number;
    };
    LotteryPossibleResultDto: {
      ticket: number;
      possibility: number;
    };
    DemocopterV2Dto: {
      game: components["schemas"]["GameEntity"];
      gameResults: components["schemas"]["LotteryGameResultDto"][];
      topGameResults?: components["schemas"]["GameResultEntity"][];
      currentPossibleResult: components["schemas"]["LotteryPossibleResultDto"];
      nextPossibleResult: components["schemas"]["LotteryPossibleResultDto"];
      feeDeductedPrizeAmount: number;
      totalPrizeAmount: number;
      totalTickets: number;
      entryFeeAmount: number;
      currentBalance: number;
      currencyId: string;
      paymentFulfilled: boolean;
      winnerSelected: boolean;
    };
    CreateWaitinglistSignatureDto: {
      wallet: string;
    };
    WaitingListSignatureResponseDto: {
      waitingNumber: number;
      signature: string;
    };
    CreateWaitinglistSignatureErrorDto: {
      /**
       * Format: date-time
       * @example 2022-03-20T06:00:00.000Z
       */
      availableSince: string;
      message: string;
    };
    BidSignatureDto: {
      timestamp: string;
    };
    BidSignatureResponseDto: {
      signature: string;
    };
    MissionData: {
      description?: string;
    };
    AbstractCurrencyDto: {
      name: string;
      icon: string | null;
    };
    MissionDto: {
      /** Format: uuid */
      id: string;
      type: components["schemas"]["MissionType"];
      name: string;
      data: components["schemas"]["MissionData"];
      rewardType: components["schemas"]["MissionRewardType"];
      rewardAmount: number;
      rewardCurrency: components["schemas"]["AbstractCurrencyDto"] | null;
      /** Format: date-time */
      startsAt: string;
      /** Format: date-time */
      endsAt: string | null;
      claimCount: number;
      accomplishCount: number;
      maxClaimCount: number | null;
      maxClaimCountPerUser: number | null;
      maxAccomplishCount: number | null;
      maxAccomplishCountPerUser: number | null;
      accomplishable: boolean;
      claimable: boolean;
      userClaimedCount: number;
      userAccomplishedCount: number;
      userClaimableAccomplishmentsCount: number;
      accomplishProgress: string | null;
    };
    FormSchema: {
      /** @description http://json-schema.org */
      JSONSchema?: { [key: string]: unknown };
      /** @description https://react-jsonschema-form.readthedocs.io/en/latest/api-reference/uiSchema */
      UISchema?: { [key: string]: unknown };
    };
    FormOption: {
      /** @description if true, one submission can contain more than one tokenId */
      nftMultipleSelectable?: boolean;
    };
    FormEntity: {
      nftNetwork: components["schemas"]["BlockchainNetwork"] | null;
      id: string;
      title: string;
      description: string;
      scheme: { [key: string]: unknown };
      options: { [key: string]: unknown } | null;
      nftContractAddress: string | null;
      nfts?: components["schemas"]["FormSubmissionsOnNftsEntity"][];
      submissions?: components["schemas"]["FormSubmissionEntity"][];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      submissionClosedAt: string | null;
    };
    FormSubmissionEntity: {
      id: string;
      userId: string | null;
      form?: components["schemas"]["FormEntity"];
      formId: string;
      user?: components["schemas"]["UserEntity"] | null;
      data: { [key: string]: unknown };
      nfts?: components["schemas"]["FormSubmissionsOnNftsEntity"][];
      /** Format: date-time */
      createdAt: string;
    };
    NftEntity: {
      network: components["schemas"]["BlockchainNetwork"];
      id: string;
      contractAddress: string;
      tokenId: string;
      metadata: { [key: string]: unknown } | null;
      formSubmissions?: components["schemas"]["FormSubmissionsOnNftsEntity"][];
    };
    FormSubmissionsOnNftsEntity: {
      id: string;
      formSubmission?: components["schemas"]["FormSubmissionEntity"];
      formSubmissionId: string;
      nft?: components["schemas"]["NftEntity"];
      nftId: string;
      form?: components["schemas"]["FormEntity"];
      formId: string;
    };
    Form: {
      nftNetwork: components["schemas"]["BlockchainNetwork"] | null;
      id: string;
      title: string;
      description: string;
      scheme: components["schemas"]["FormSchema"] | null;
      options: components["schemas"]["FormOption"] | null;
      nftContractAddress: string | null;
      nfts?: components["schemas"]["FormSubmissionsOnNftsEntity"][];
      submissions?: components["schemas"]["FormSubmissionEntity"][];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      submissionClosedAt: string | null;
    };
    SubmitFormDto: {
      data: { [key: string]: unknown };
      walletAddress?: string;
      signature?: string;
      tokenIds?: string[];
    };
    FormInventoryDto: {
      walletAddress?: string;
    };
    FormInventoryResponseDto: {
      network: components["schemas"]["BlockchainNetwork"];
      id: string;
      contractAddress: string;
      tokenId: string;
      metadata: { [key: string]: unknown } | null;
      formSubmissions?: components["schemas"]["FormSubmissionsOnNftsEntity"][];
      completed: boolean;
    };
    /** @enum {string} */
    MobileOs: "IOS" | "ANDROID" | "UNKNOWN";
    MobileRegisterDto: {
      os?: components["schemas"]["MobileOs"];
      fcmToken: string;
      osVersion?: string;
      appVersion?: string;
    };
    MobileResponseDto: {
      os: components["schemas"]["MobileOs"];
      id: string;
      fcmToken: string;
      appVersion: string;
      osVersion: string;
      createdAt: string;
      updatedAt: string;
    };
    MobileCheckDto: {
      os: components["schemas"]["MobileOs"];
      fcmToken: string;
    };
    MobileCheckResponseDto: {
      current: boolean;
    };
    Asset: {
      ticker: string;
      name: string;
      iconUrl: string;
      tokenType: string | null;
    };
    BalanceResponseDto: {
      asset: components["schemas"]["Asset"];
      amount: string;
      valuatedAmount: string;
      valuatedCurrency: string;
    };
    RegisterWalletDto: {
      /** @description Only BITCOIN, ETHEREUM, BSC, XTZ */
      network: { [key: string]: unknown };
      address: string;
      index: number;
      name: string;
    };
    WalletResponseDto: {
      /** @description Registered wallet's unique id */
      id: string;
      /** @description Registered wallet's address */
      address: string;
      /** @description Registered wallet's blockchain network */
      network: { [key: string]: unknown };
      /** @description Wallet's registered index */
      index: number;
      /** @description Wallet's nickname */
      name: string;
    };
    ThirdPartyEarnDto: {
      /** @enum {string} */
      currency: "MVL" | "bMVL";
      amount: number;
      description?: string;
      identifier: string;
      timestamp: string;
    };
    ThirdPartyBalanceResponseDto: {
      amount: number;
    };
    S2sHmacErrorDTO: {
      /** @default Authorization is empty! */
      message: string;
    };
    S2SDefaultDto: {
      timestamp: string;
    };
    ThirdPartyEarnEventParticipationDto: {
      timestamp: string;
      value: number;
      description?: string;
      identifier: string;
    };
    ThirdPartyConnectDto: {
      /** @description JWT Token from third party app(ex: TADA) */
      token: string;
    };
    ThirdPartyConnectCheckResponseDto: {
      /** @description Flag for connection information for third party app is exists. */
      exists: boolean;
      /** @description Identifier for display received from third party app. */
      displayName: string | null;
    };
    EarnEventDto: {
      /** @enum {string} */
      claimType: "CONSTANT" | "RATIO_DIVISION";
      app: {
        id?: string;
        name?: string;
      };
      /** @description event id */
      id: string;
      /** Format: date-time */
      eventStartAt: string;
      /** Format: date-time */
      eventEndAt: string;
      /** Format: date-time */
      claimStartAt: string;
      /** Format: date-time */
      claimEndAt: string;
      /** @description event icon image url */
      iconUrl: string;
      title: string;
      subTitle: string;
      detailPageUrl: string;
      /**
       * @description currency text for point
       * ex) P
       */
      pointCurrency: string;
      /** @description currency icon image url for point */
      pointIconUrl: string;
      /**
       * @description button text for earn
       * ex) 나의 Trading Point
       */
      eventActionTitle: string;
      /**
       * @description button text for earn
       * ex) Trade 바로가기
       */
      eventActionButtonTitle: string;
      /** @description scheme for execute when earn button clicked */
      eventActionScheme: string;
      /**
       * @description currency text for claim
       * ex) bMVL
       */
      currency: string;
      /** @description currency icon for claim */
      currencyIconUrl: string;
      calcInfoPageUrl: string;
    };
    EarnEventCurrentResponseDto: {
      /** @description current amount */
      amount: number;
    };
    EarnEventClaimRequestDto: {
      /** @description Wallet address to receive token */
      address: string;
    };
    EarnEventClaimCheckResponseDto: {
      /** @enum {string} */
      status:
        | "INCOMING"
        | "CONFIRMING"
        | "COMPLETED"
        | "CANCELED"
        | "FAILED"
        | "IN_MIGRATION";
    };
    EarnEventGetClaimResponseDto: {
      /** @enum {string} */
      claimType: "CONSTANT" | "RATIO_DIVISION";
      currency: string;
      /** @description currency icon for claim. */
      currencyIconUrl: string;
      calcInfoPageUrl: string;
      /** @description Total amount to claim. */
      amount: number;
    };
    BalanceClutchCurrentDto: {
      /** @enum {string} */
      currencyId: "MVL" | "bMVL";
    };
    BalanceClutchWithdrawRequestDto: {
      /** @enum {string} */
      currencyId: "MVL" | "bMVL";
      amount: number;
      address: string;
    };
    BalanceClutchDepositRequestDto: {
      /** @enum {string} */
      currencyId: "MVL" | "bMVL";
      address: string;
      amount: number;
    };
    BalanceClutchDepositRequestResponseDto: {
      balanceDepositRequest: components["schemas"]["BalanceDepositRequestEntity"];
      toAddress: string;
    };
  };
}

export interface operations {
  AppController_getHello: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  HealthController_getHealth: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  DeferredOauthController_authVerification: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SignedUserIdentifierWithAccessTokenDto"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeferredAuthValidateDto"];
      };
    };
  };
  DeferredOauthController_createDeferredAuth: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DeferredAuthValidateDto"];
        };
      };
    };
  };
  WalletsController_connectWallet: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["WalletAndNonceDto"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WalletAddressDto"];
      };
    };
  };
  WalletsController_verifyWallet: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SignedUserIdentifierWithAccessTokenDto"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyWalletAddressDto"];
      };
    };
  };
  DiscordOauthController_discordAuth: {
    parameters: {
      query: {
        redirectUrl: string;
      };
    };
    responses: {
      200: unknown;
    };
  };
  /** @deprecated use POST /auth/deferred/validate */
  DiscordOauthController_discordAuthVerification: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SignedUserIdentifierWithAccessTokenDto"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeprecatedDeferredAuthValidateDto"];
      };
    };
  };
  TwitterOauthController_twitterAuth: {
    parameters: {
      query: {
        redirectUrl: string;
      };
    };
    responses: {
      200: unknown;
    };
  };
  Web3OauthController_requestSignMessage: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Web3AuthRequestResponseDto"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Web3AuthRequestDto"];
      };
    };
  };
  Web3OauthController_authVerification: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SignedUserIdentifierWithAccessTokenDto"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Web3AuthDto"];
      };
    };
  };
  UsersController_getCurrentUser: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SignedUserIdentifierDto"];
        };
      };
    };
  };
  UsersController_getAbstractUserInfo: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AbstractUserDto"];
        };
      };
    };
  };
  UsersController_getMyInvitees: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetInviteesDto"];
        };
      };
    };
  };
  UsersController_registerReferrer: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterReferrerDto"];
      };
    };
  };
  /** ClutchUser Registration */
  ClutchUserController_signup: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ClutchUserResponseDto"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignupDto"];
      };
    };
  };
  /** ClutchUser check */
  ClutchUserController_check: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SignupCheckResponseDto"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignupCheckDto"];
      };
    };
  };
  /** ClutchUser restore key or share */
  ClutchUserController_restore: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SimpleResponseDto"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RestoreAccountDto"];
      };
    };
  };
  /** set accessToken if provider = APPLE, set idtoken if provider = GOOGLE<br/> app-basic Secured */
  ClutchUserController_getServerShare: {
    parameters: {
      query: {
        /** required if type = GOOGLE */
        idtoken?: string;
        /** required if type = APPLE */
        accessToken?: string;
        polynomialId?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ShareResponseDto"];
        };
      };
      default: {
        content: {
          "application/json": components["schemas"]["ShareResponseDto"];
        };
      };
    };
  };
  /** HMAC Secured */
  ClutchUserController_updateServerShare: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ShareResponseDto"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["HmacErrorDTO"];
        };
      };
      default: {
        content: {
          "application/json": components["schemas"]["ShareResponseDto"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateServerShareDto"];
      };
    };
  };
  CurrenciesController_getCurrency: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CurrencyEntity"];
        };
      };
    };
  };
  BalanceAccountsController_getUserBalanceAccount: {
    parameters: {
      query: {
        currencyId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BalanceAccountEntity"];
        };
      };
    };
  };
  BalanceWithdrawalRequestsController_getActiveWithdrawalRequests: {
    parameters: {
      query: {
        currencyId?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BalanceWithdrawalRequestStatusDto"][];
        };
      };
    };
  };
  BalanceWithdrawalRequestsController_getWithdrawalRequest: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BalanceWithdrawalRequestStatusDto"];
        };
      };
    };
  };
  BalanceWithdrawalRequestsController_cancelWithdrawalRequest: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BalanceWithdrawalRequestStatusDto"];
        };
      };
      /** User mismatch */
      403: unknown;
      /** Non-cancellable request */
      422: unknown;
    };
  };
  BalanceWithdrawalRequestsController_createWithdrawalRequest: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["BalanceWithdrawalRequestStatusDto"];
        };
      };
      /** Not enough balance */
      400: unknown;
      /** Active requests already exists */
      403: unknown;
      /** Missing or incorrect information given */
      422: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateBalanceWithdrawalRequestDto"];
      };
    };
  };
  PaymentsController_createPayment: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PaymentStatusDto"];
        };
      };
      /** Not enough balance */
      400: unknown;
      /** Active pending request exists. cancel it first! */
      403: unknown;
      /** Missing or incorrect information given */
      422: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePaymentDto"];
      };
    };
  };
  PaymentsController_getActivePayment: {
    parameters: {
      query: {
        purchasableGroupId?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaymentStatusDto"][];
        };
      };
    };
  };
  PaymentsController_validatePayment: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PaymentStatusDto"];
        };
      };
    };
  };
  PaymentsController_cancelPayment: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaymentStatusDto"];
        };
      };
    };
  };
  PurchasablesController_getGroupBySlug: {
    parameters: {
      path: {
        slug: string;
      };
      query: {
        tokenNetwork?: components["schemas"]["BlockchainNetwork"];
        tokenId?: string;
        tokenContractAddress?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PurchasableGroupDto"];
        };
      };
    };
  };
  GamesController_postRetry: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["GameResultResponseDto"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GameResultDto"];
      };
    };
  };
  GamesController_postResultPublic: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["GameResultResponseDto"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GameResultDto"];
      };
    };
  };
  GamesController_requestCreateThumbnail: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: unknown;
    };
  };
  GamesController_getGame: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GameEntity"];
        };
      };
    };
  };
  GamesController_payGame: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: unknown;
    };
  };
  GamesController_getGameResult: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GameResultEntity"];
        };
      };
    };
  };
  GamesController_getGameResultAbstract: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: unknown;
    };
  };
  TadaArcadeController_getDrivers: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TadaArcadeDriverInfo"][];
        };
      };
    };
  };
  DemocopterController_getActiveDemocopterGame: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GameEntity"];
        };
      };
    };
  };
  DemocopterController_getDemocopterGame: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DemocopterV2Dto"];
        };
      };
    };
  };
  DemocopterController_startDemocopterGame: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": number;
        };
      };
    };
  };
  DemocopterController_getDemocopterLeaderboard: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LotteryGameResultDto"][];
        };
      };
    };
  };
  DemocopterAdminController_createSchedule: {
    parameters: {
      path: {
        gameId: string;
      };
    };
    responses: {
      201: unknown;
    };
  };
  DiscordBotController_register: {
    parameters: {};
    responses: {
      201: unknown;
    };
  };
  NftSalesController_get: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PurchasableEntity"][];
        };
      };
    };
  };
  NftSalesController_createSignature: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["WaitingListSignatureResponseDto"];
        };
      };
      /** Sale not started or already finished */
      403: unknown;
      /** No wallet exists or no waiting listed */
      404: unknown;
      /** Not the current minting order */
      422: {
        content: {
          "application/json": components["schemas"]["CreateWaitinglistSignatureErrorDto"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateWaitinglistSignatureDto"];
      };
    };
  };
  NftSalesController_createBidSignature: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["BidSignatureResponseDto"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BidSignatureDto"];
      };
    };
  };
  MissionsController_getMissions: {
    parameters: {
      path: {
        group: string;
      };
      query: {
        type?: components["schemas"]["MissionType"];
        inviteeId?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MissionDto"][];
        };
      };
    };
  };
  MissionsController_claimMission: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: unknown;
    };
  };
  FormsController_getForm: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Form"];
        };
      };
    };
  };
  FormsController_submitForm: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["FormSubmissionEntity"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmitFormDto"];
      };
    };
  };
  FormsController_inventory: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["FormInventoryResponseDto"][];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FormInventoryDto"];
      };
    };
  };
  MobileController_register: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["MobileResponseDto"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["HmacErrorDTO"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MobileRegisterDto"];
      };
    };
  };
  MobileController_checkCurrent: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["MobileCheckResponseDto"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["HmacErrorDTO"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MobileCheckDto"];
      };
    };
  };
  VerifiedWalletV11Controller_balance: {
    parameters: {
      query: {
        address: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BalanceResponseDto"][];
        };
      };
      default: {
        content: {
          "application/json": components["schemas"]["BalanceResponseDto"][];
        };
      };
    };
  };
  VerifiedWalletV11Controller_simplePrice: {
    parameters: {
      query: {
        ids: string;
        vs_currencies: string;
        include_market_cap?: boolean;
        include_24hr_vol?: boolean;
        include_24hr_change?: boolean;
        include_last_updated_at?: boolean;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
      default: unknown;
    };
  };
  VerifiedWalletV10Controller_list: {
    parameters: {
      query: {
        pubkey: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["WalletResponseDto"][];
        };
      };
      /** sorted by index */
      default: {
        content: {
          "application/json": components["schemas"]["WalletResponseDto"][];
        };
      };
    };
  };
  /** Register client-side created wallet */
  VerifiedWalletV10Controller_registerWallet: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["WalletResponseDto"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterWalletDto"];
      };
    };
  };
  VerifiedWalletV10Controller_balance: {
    parameters: {
      query: {
        address: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BalanceResponseDto"][];
        };
      };
      default: {
        content: {
          "application/json": components["schemas"]["BalanceResponseDto"][];
        };
      };
    };
  };
  /** Earn Servered balance third party user */
  ThirdPartyController_balanceEarn: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ThirdPartyBalanceResponseDto"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["S2sHmacErrorDTO"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ThirdPartyEarnDto"];
      };
    };
  };
  /** Get Serverd Balance amount */
  ThirdPartyController_balance: {
    parameters: {
      query: {
        currency: "MVL" | "bMVL";
        identifier: string;
        timestamp: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ThirdPartyBalanceResponseDto"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["S2sHmacErrorDTO"];
        };
      };
    };
  };
  ThirdPartyController_balanceCurrent: {
    parameters: {
      query: {
        currency: "MVL" | "bMVL";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ThirdPartyBalanceResponseDto"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["S2sHmacErrorDTO"];
        };
      };
    };
  };
  ThirdPartyController_notiApiSample: {
    parameters: {};
    responses: {
      201: unknown;
      401: {
        content: {
          "application/json": components["schemas"]["S2sHmacErrorDTO"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["S2SDefaultDto"];
      };
    };
  };
  ThirdPartyController_thirdPartyGetEventParticipationList: {
    parameters: {
      path: {
        eventAlias: string;
      };
      query: {
        timestamp: string;
        identifier: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": { [key: string]: unknown }[];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["S2sHmacErrorDTO"];
        };
      };
    };
  };
  ThirdPartyController_thirdPartyEventParticipation: {
    parameters: {
      path: {
        eventAlias: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SimpleResponseDto"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["S2sHmacErrorDTO"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ThirdPartyEarnEventParticipationDto"];
      };
    };
  };
  ThirdPartyForClutchController_connectCheck: {
    parameters: {
      path: {
        appId: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ThirdPartyConnectCheckResponseDto"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["HmacErrorDTO"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ThirdPartyConnectDto"];
      };
    };
  };
  /** Connecting to third party user (for now just TADA) */
  ThirdPartyForClutchController_connect: {
    parameters: {
      path: {
        appId: string;
      };
    };
    responses: {
      /**
       * Will post result of connection.
       *
       *     curl --request POST '{{notiURL}}' \
       *
       *     --header 'Authorization: {{hmacSig}}' \
       *
       *     --header 'Content-Type: application/json' \
       *
       *     --data-raw '{
       *
       *         "timestamp": "{{now}}",
       *
       *         "method": "connect",
       *
       *         "identifier": "connected third party user identifer"
       *
       *     }'
       *
       * This POST require Response like
       *
       *     {
       *
       *       "displayName": "will display connected third party user name" // optional
       *
       *     }
       */
      200: {
        content: {
          "application/json": components["schemas"]["SimpleResponseDto"];
        };
      };
      201: {
        content: {
          "application/json": components["schemas"]["SimpleResponseDto"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["HmacErrorDTO"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ThirdPartyConnectDto"];
      };
    };
  };
  /** Disconnecting to third party user (for now just TADA) */
  ThirdPartyForClutchController_disconnect: {
    parameters: {
      path: {
        appId: string;
      };
    };
    responses: {
      /**
       * Will post result of connection.
       *
       *     curl --request POST '{{notiURL}}' \
       *
       *     --header 'Authorization: {{hmacSig}}' \
       *
       *     --header 'Content-Type: application/json' \
       *
       *     --data-raw '{
       *
       *         "timestamp": "{{now}}",
       *
       *         "method": "connect",
       *
       *         "identifier": "connected third party user identifer"
       *
       *     }'
       *
       * This POST require Response like
       *
       *     {
       *
       *     }
       */
      200: {
        content: {
          "application/json": components["schemas"]["SimpleResponseDto"];
        };
      };
      201: {
        content: {
          "application/json": components["schemas"]["SimpleResponseDto"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["HmacErrorDTO"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ThirdPartyConnectDto"];
      };
    };
  };
  /** Event Lists. */
  EarnEventController_earnEventGet: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["EarnEventDto"][];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["HmacErrorDTO"];
        };
      };
    };
  };
  /** User's Current point from this event. */
  EarnEventController_earnEventPariticipationCurrent: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["EarnEventCurrentResponseDto"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["HmacErrorDTO"];
        };
      };
    };
  };
  /** Request Claim this event. */
  EarnEventController_earhEventClaimRequest: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SimpleResponseDto"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["HmacErrorDTO"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EarnEventClaimRequestDto"];
      };
    };
  };
  /** Check Claim processing status. */
  EarnEventController_earhEventClaimCheck: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["EarnEventClaimCheckResponseDto"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["HmacErrorDTO"];
        };
      };
    };
  };
  /** Claim informations to show claim modal. */
  EarnEventController_earnEventGetClaim: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["EarnEventGetClaimResponseDto"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["HmacErrorDTO"];
        };
      };
    };
  };
  BalanceClutchController_currentGet: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["BalanceAccountEntity"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["HmacErrorDTO"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BalanceClutchCurrentDto"];
      };
    };
  };
  BalanceClutchController_withdrawRequest: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["BalanceWithdrawalRequestEntity"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["HmacErrorDTO"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BalanceClutchWithdrawRequestDto"];
      };
    };
  };
  BalanceClutchController_getWithdrawRequest: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BalanceWithdrawalRequestEntity"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["HmacErrorDTO"];
        };
      };
    };
  };
  BalanceClutchController_depositRequest: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["BalanceClutchDepositRequestResponseDto"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["HmacErrorDTO"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BalanceClutchDepositRequestDto"];
      };
    };
  };
}

export interface external {}


export type UserIdentifierType = components['schemas']['UserIdentifierType'];
export type DeferredAuthValidateDto = components['schemas']['DeferredAuthValidateDto'];
export type WalletEntity = components['schemas']['WalletEntity'];
export type ThirdPartyUserEntity = components['schemas']['ThirdPartyUserEntity'];
export type EarnEventClaimType = components['schemas']['EarnEventClaimType'];
export type BlockchainNetwork = components['schemas']['BlockchainNetwork'];
export type CurrencyEntity = components['schemas']['CurrencyEntity'];
export type EarnEventParticipationLogEntity = components['schemas']['EarnEventParticipationLogEntity'];
export type EarnEventEntity = components['schemas']['EarnEventEntity'];
export type UserEntity = components['schemas']['UserEntity'];
export type UserIdentifierEntity = components['schemas']['UserIdentifierEntity'];
export type UserWithWalletDto = components['schemas']['UserWithWalletDto'];
export type SignedUserIdentifierWithAccessTokenDto = components['schemas']['SignedUserIdentifierWithAccessTokenDto'];
export type WalletAddressDto = components['schemas']['WalletAddressDto'];
export type WalletAndNonceDto = components['schemas']['WalletAndNonceDto'];
export type VerifyWalletAddressDto = components['schemas']['VerifyWalletAddressDto'];
export type DeprecatedDeferredAuthValidateDto = components['schemas']['DeprecatedDeferredAuthValidateDto'];
export type Web3AuthRequestDto = components['schemas']['Web3AuthRequestDto'];
export type Web3AuthRequestResponseDto = components['schemas']['Web3AuthRequestResponseDto'];
export type Web3AuthDto = components['schemas']['Web3AuthDto'];
export type SignedUserIdentifierDto = components['schemas']['SignedUserIdentifierDto'];
export type AbstractUserDto = components['schemas']['AbstractUserDto'];
export type Invitee = components['schemas']['Invitee'];
export type GetInviteesDto = components['schemas']['GetInviteesDto'];
export type RegisterReferrerDto = components['schemas']['RegisterReferrerDto'];
export type ForClutchUserIdentifierType = components['schemas']['ForClutchUserIdentifierType'];
export type SignupDto = components['schemas']['SignupDto'];
export type ClutchUserResponseDto = components['schemas']['ClutchUserResponseDto'];
export type SignupCheckDto = components['schemas']['SignupCheckDto'];
export type SignupCheckResponseDto = components['schemas']['SignupCheckResponseDto'];
export type RestoreAccountDto = components['schemas']['RestoreAccountDto'];
export type SimpleResponseDto = components['schemas']['SimpleResponseDto'];
export type UpdateServerShareDto = components['schemas']['UpdateServerShareDto'];
export type ShareResponseDto = components['schemas']['ShareResponseDto'];
export type HmacErrorDTO = components['schemas']['HmacErrorDTO'];
export type BalanceAccountEntity = components['schemas']['BalanceAccountEntity'];
export type BalanceRequestStatus = components['schemas']['BalanceRequestStatus'];
export type PaymentStatus = components['schemas']['PaymentStatus'];
export type PurchasableType = components['schemas']['PurchasableType'];
export type PurchasablePayMethod = components['schemas']['PurchasablePayMethod'];
export type PurchasableEntity = components['schemas']['PurchasableEntity'];
export type PurchasableGroupEntity = components['schemas']['PurchasableGroupEntity'];
export type ItemEntity = components['schemas']['ItemEntity'];
export type PaymentEntity = components['schemas']['PaymentEntity'];
export type TokenTransactionLogEntity = components['schemas']['TokenTransactionLogEntity'];
export type BalanceDepositRequestEntity = components['schemas']['BalanceDepositRequestEntity'];
export type GameResultEntity = components['schemas']['GameResultEntity'];
export type GameEntity = components['schemas']['GameEntity'];
export type MissionType = components['schemas']['MissionType'];
export type MissionRewardType = components['schemas']['MissionRewardType'];
export type UserActivityEntity = components['schemas']['UserActivityEntity'];
export type MissionAccomplishedActivityEntity = components['schemas']['MissionAccomplishedActivityEntity'];
export type MissionEntity = components['schemas']['MissionEntity'];
export type MissionAccomplishmentEntity = components['schemas']['MissionAccomplishmentEntity'];
export type BalanceTransactionEntity = components['schemas']['BalanceTransactionEntity'];
export type BalanceWithdrawalRequestEntity = components['schemas']['BalanceWithdrawalRequestEntity'];
export type BalanceWithdrawalRequestStatusDto = components['schemas']['BalanceWithdrawalRequestStatusDto'];
export type CreateBalanceWithdrawalRequestDto = components['schemas']['CreateBalanceWithdrawalRequestDto'];
export type PaymentOptions = components['schemas']['PaymentOptions'];
export type CreatePaymentDto = components['schemas']['CreatePaymentDto'];
export type PaymentStatusDto = components['schemas']['PaymentStatusDto'];
export type PurchasableNftInfo = components['schemas']['PurchasableNftInfo'];
export type TPurchasableEntity = components['schemas']['TPurchasableEntity'];
export type PurchasableGroupPageSettingsDto = components['schemas']['PurchasableGroupPageSettingsDto'];
export type PurchasableGroupDto = components['schemas']['PurchasableGroupDto'];
export type GameResultDto = components['schemas']['GameResultDto'];
export type GameResultAbstractDto = components['schemas']['GameResultAbstractDto'];
export type GameResultResponseDto = components['schemas']['GameResultResponseDto'];
export type TadaArcadeDriverInfo = components['schemas']['TadaArcadeDriverInfo'];
export type AbstractUserIdentifierDto = components['schemas']['AbstractUserIdentifierDto'];
export type LotteryGameResultDto = components['schemas']['LotteryGameResultDto'];
export type LotteryPossibleResultDto = components['schemas']['LotteryPossibleResultDto'];
export type DemocopterV2Dto = components['schemas']['DemocopterV2Dto'];
export type CreateWaitinglistSignatureDto = components['schemas']['CreateWaitinglistSignatureDto'];
export type WaitingListSignatureResponseDto = components['schemas']['WaitingListSignatureResponseDto'];
export type CreateWaitinglistSignatureErrorDto = components['schemas']['CreateWaitinglistSignatureErrorDto'];
export type BidSignatureDto = components['schemas']['BidSignatureDto'];
export type BidSignatureResponseDto = components['schemas']['BidSignatureResponseDto'];
export type MissionData = components['schemas']['MissionData'];
export type AbstractCurrencyDto = components['schemas']['AbstractCurrencyDto'];
export type MissionDto = components['schemas']['MissionDto'];
export type FormSchema = components['schemas']['FormSchema'];
export type FormOption = components['schemas']['FormOption'];
export type FormEntity = components['schemas']['FormEntity'];
export type FormSubmissionEntity = components['schemas']['FormSubmissionEntity'];
export type NftEntity = components['schemas']['NftEntity'];
export type FormSubmissionsOnNftsEntity = components['schemas']['FormSubmissionsOnNftsEntity'];
export type Form = components['schemas']['Form'];
export type SubmitFormDto = components['schemas']['SubmitFormDto'];
export type FormInventoryDto = components['schemas']['FormInventoryDto'];
export type FormInventoryResponseDto = components['schemas']['FormInventoryResponseDto'];
export type MobileOs = components['schemas']['MobileOs'];
export type MobileRegisterDto = components['schemas']['MobileRegisterDto'];
export type MobileResponseDto = components['schemas']['MobileResponseDto'];
export type MobileCheckDto = components['schemas']['MobileCheckDto'];
export type MobileCheckResponseDto = components['schemas']['MobileCheckResponseDto'];
export type Asset = components['schemas']['Asset'];
export type BalanceResponseDto = components['schemas']['BalanceResponseDto'];
export type RegisterWalletDto = components['schemas']['RegisterWalletDto'];
export type WalletResponseDto = components['schemas']['WalletResponseDto'];
export type ThirdPartyEarnDto = components['schemas']['ThirdPartyEarnDto'];
export type ThirdPartyBalanceResponseDto = components['schemas']['ThirdPartyBalanceResponseDto'];
export type S2sHmacErrorDTO = components['schemas']['S2sHmacErrorDTO'];
export type S2SDefaultDto = components['schemas']['S2SDefaultDto'];
export type ThirdPartyEarnEventParticipationDto = components['schemas']['ThirdPartyEarnEventParticipationDto'];
export type ThirdPartyConnectDto = components['schemas']['ThirdPartyConnectDto'];
export type ThirdPartyConnectCheckResponseDto = components['schemas']['ThirdPartyConnectCheckResponseDto'];
export type EarnEventDto = components['schemas']['EarnEventDto'];
export type EarnEventCurrentResponseDto = components['schemas']['EarnEventCurrentResponseDto'];
export type EarnEventClaimRequestDto = components['schemas']['EarnEventClaimRequestDto'];
export type EarnEventClaimCheckResponseDto = components['schemas']['EarnEventClaimCheckResponseDto'];
export type EarnEventGetClaimResponseDto = components['schemas']['EarnEventGetClaimResponseDto'];
export type BalanceClutchCurrentDto = components['schemas']['BalanceClutchCurrentDto'];
export type BalanceClutchWithdrawRequestDto = components['schemas']['BalanceClutchWithdrawRequestDto'];
export type BalanceClutchDepositRequestDto = components['schemas']['BalanceClutchDepositRequestDto'];
export type BalanceClutchDepositRequestResponseDto = components['schemas']['BalanceClutchDepositRequestResponseDto'];
